name: Build and Deploy Note-Book App

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    name: Build Note-Book App
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: docker build --platform linux/amd64 --file Dockerfile --tag ani2fun/note-book:${{ github.sha }} .

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [ 'build' ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PAT }}

      - name: Build and push image to DockerHub
        uses: docker/build-push-action@v5
        with:
          context: ./
          file: Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            ani2fun/note-book:latest
            ani2fun/note-book:${{ github.sha }}

  update-manifest:
    name: Update Kubernetes Manifest for Note-Book App
    runs-on: ubuntu-latest
    needs: [ 'build-and-push' ]

    steps:
      - name: Checkout infra repository
        uses: actions/checkout@v4
        with:
          repository: ani2fun/infra
          ref: 'main'
          token: ${{ secrets.G_TOKEN }}

      - name: Set up Git
        run: |
          git config --global user.email "${{ secrets.USER_EMAIL }}"
          git config --global user.name "${{ secrets.USER_NAME }}"

      - name: Update note-book image in Kubernetes manifest
        run: |
          sed -i "s#ani2fun/note-book:.*#ani2fun/note-book:${{ github.sha }}#g" deploy/note-book/notebook-app-deployment.yaml
          git add deploy/note-book/notebook-app-deployment.yaml
          git commit -m "Updated note-book image to ${{ github.sha }}"
          git push origin main

# Uncomment the following section to trigger ArgoCD Sync after the manifest is updated
#  trigger-argocd-sync:
#    name: Trigger ArgoCD Sync
#    runs-on: ubuntu-latest
#    needs: [ 'update-manifest' ]
#    steps:
#      - name: Sync ArgoCD Application
#        run: |
#          curl -s -X POST https://argocd.kakde.eu/api/v1/applications/note-book/sync \
#          -H "Authorization: Bearer ${{ secrets.ARGOCD_TOKEN }}"
